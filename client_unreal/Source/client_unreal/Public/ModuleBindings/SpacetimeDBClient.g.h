// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit 0712d3bfbd159367de09efeeeacb54c9d4f0ff61).

#pragma once
#include "CoreMinimal.h"
#include "BSATN/UESpacetimeDB.h"
#include "Connection/Callback.h"
#include "Connection/DbConnectionBase.h"
#include "Connection/DbConnectionBuilder.h"
#include "Connection/SetReducerFlags.h"
#include "Connection/Subscription.h"
#include "Kismet/BlueprintFunctionLibrary.h"
#include "ModuleBindings/ReducerBase.g.h"
#include "ModuleBindings/Reducers/Add.g.h"
#include "ModuleBindings/Reducers/Connect.g.h"
#include "ModuleBindings/Reducers/Debug.g.h"
#include "ModuleBindings/Reducers/Disconnect.g.h"
#include "ModuleBindings/Reducers/SayHello.g.h"
#include "Types/Builtins.h"
#include "SpacetimeDBClient.g.generated.h"

// Forward declarations
class UDbConnection;
class URemoteTables;
class URemoteReducers;
class USubscriptionBuilder;
class USubscriptionHandle;

/** Forward declaration for tables */
class UPersonTable;
/***/

// Delegates using the generated connection type. These wrap the base
// delegates defined in the SDK so that projects can work directly with
// UDbConnection without manual casting in user code.
DECLARE_DYNAMIC_DELEGATE_ThreeParams(
	FOnConnectDelegate,
	UDbConnection*, Connection,
	FSpacetimeDBIdentity, Identity,
	const FString&, Token);

DECLARE_DYNAMIC_DELEGATE_TwoParams(
	FOnDisconnectDelegate,
	UDbConnection*, Connection,
	const FString&, Error);


// Context classes for event handling

USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FContextBase
{
	GENERATED_BODY()

	FContextBase() = default;
	FContextBase(UDbConnection* InConn);

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	URemoteTables* Db;

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	URemoteReducers* Reducers;

	UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
	USetReducerFlags* SetReducerFlags;

	bool IsActive() const;
	void Disconnect();
	bool TryGetIdentity(FSpacetimeDBIdentity& OutIdentity) const;
	FSpacetimeDBConnectionId GetConnectionId() const;
	USubscriptionBuilder* SubscriptionBuilder();

protected:
	UPROPERTY()
	UDbConnection* Conn;

};

UENUM(BlueprintType, Category = "SpacetimeDB")
enum class EReducerTag : uint8
{
    Add,
    Connect,
    Debug,
    Disconnect,
    SayHello
};

USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FReducer
{
    GENERATED_BODY()

public:
    UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
    EReducerTag Tag;

    TVariant<FAddArgs, FConnectArgs, FDebugArgs, FDisconnectArgs, FSayHelloArgs> Data;

    // Optional metadata
    UPROPERTY(BlueprintReadOnly, Category = "SpacetimeDB")
    FString ReducerName;
    uint32 ReducerId = 0;
    uint32 RequestId = 0;

    static FReducer Add(const FAddArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::Add;
        Out.Data.Set<FAddArgs>(Value);
        Out.ReducerName = TEXT("Add");
        return Out;
    }

    FORCEINLINE bool IsAdd() const { return Tag == EReducerTag::Add; }
    FORCEINLINE FAddArgs GetAsAdd() const
    {
        ensureMsgf(IsAdd(), TEXT("Reducer does not hold Add!"));
        return Data.Get<FAddArgs>();
    }

    static FReducer Connect(const FConnectArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::Connect;
        Out.Data.Set<FConnectArgs>(Value);
        Out.ReducerName = TEXT("Connect");
        return Out;
    }

    FORCEINLINE bool IsConnect() const { return Tag == EReducerTag::Connect; }
    FORCEINLINE FConnectArgs GetAsConnect() const
    {
        ensureMsgf(IsConnect(), TEXT("Reducer does not hold Connect!"));
        return Data.Get<FConnectArgs>();
    }

    static FReducer Debug(const FDebugArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::Debug;
        Out.Data.Set<FDebugArgs>(Value);
        Out.ReducerName = TEXT("Debug");
        return Out;
    }

    FORCEINLINE bool IsDebug() const { return Tag == EReducerTag::Debug; }
    FORCEINLINE FDebugArgs GetAsDebug() const
    {
        ensureMsgf(IsDebug(), TEXT("Reducer does not hold Debug!"));
        return Data.Get<FDebugArgs>();
    }

    static FReducer Disconnect(const FDisconnectArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::Disconnect;
        Out.Data.Set<FDisconnectArgs>(Value);
        Out.ReducerName = TEXT("Disconnect");
        return Out;
    }

    FORCEINLINE bool IsDisconnect() const { return Tag == EReducerTag::Disconnect; }
    FORCEINLINE FDisconnectArgs GetAsDisconnect() const
    {
        ensureMsgf(IsDisconnect(), TEXT("Reducer does not hold Disconnect!"));
        return Data.Get<FDisconnectArgs>();
    }

    static FReducer SayHello(const FSayHelloArgs& Value)
    {
        FReducer Out;
        Out.Tag = EReducerTag::SayHello;
        Out.Data.Set<FSayHelloArgs>(Value);
        Out.ReducerName = TEXT("SayHello");
        return Out;
    }

    FORCEINLINE bool IsSayHello() const { return Tag == EReducerTag::SayHello; }
    FORCEINLINE FSayHelloArgs GetAsSayHello() const
    {
        ensureMsgf(IsSayHello(), TEXT("Reducer does not hold SayHello!"));
        return Data.Get<FSayHelloArgs>();
    }

    FORCEINLINE bool operator==(const FReducer& Other) const
    {
        if (Tag != Other.Tag || ReducerId != Other.ReducerId || RequestId != Other.RequestId || ReducerName != Other.ReducerName) return false;
        switch (Tag)
        {
        case EReducerTag::Add:
            return GetAsAdd() == Other.GetAsAdd();
        case EReducerTag::Connect:
            return GetAsConnect() == Other.GetAsConnect();
        case EReducerTag::Debug:
            return GetAsDebug() == Other.GetAsDebug();
        case EReducerTag::Disconnect:
            return GetAsDisconnect() == Other.GetAsDisconnect();
        case EReducerTag::SayHello:
            return GetAsSayHello() == Other.GetAsSayHello();
        default: return false;
        }
    }
    FORCEINLINE bool operator!=(const FReducer& Other) const { return !(*this == Other); }
};

UCLASS()
class CLIENT_UNREAL_API UReducerBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer Add(const FAddArgs& Value) {
        return FReducer::Add(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsAdd(const FReducer& Reducer) { return Reducer.IsAdd(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FAddArgs GetAsAdd(const FReducer& Reducer) {
        return Reducer.GetAsAdd();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer Connect(const FConnectArgs& Value) {
        return FReducer::Connect(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsConnect(const FReducer& Reducer) { return Reducer.IsConnect(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FConnectArgs GetAsConnect(const FReducer& Reducer) {
        return Reducer.GetAsConnect();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer Debug(const FDebugArgs& Value) {
        return FReducer::Debug(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDebug(const FReducer& Reducer) { return Reducer.IsDebug(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDebugArgs GetAsDebug(const FReducer& Reducer) {
        return Reducer.GetAsDebug();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer Disconnect(const FDisconnectArgs& Value) {
        return FReducer::Disconnect(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsDisconnect(const FReducer& Reducer) { return Reducer.IsDisconnect(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FDisconnectArgs GetAsDisconnect(const FReducer& Reducer) {
        return Reducer.GetAsDisconnect();
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|Reducer")
    static FReducer SayHello(const FSayHelloArgs& Value) {
        return FReducer::SayHello(Value);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static bool IsSayHello(const FReducer& Reducer) { return Reducer.IsSayHello(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|Reducer")
    static FSayHelloArgs GetAsSayHello(const FReducer& Reducer) {
        return Reducer.GetAsSayHello();
    }
};

/** Metadata describing a reducer run. */
USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FClientUnrealReducerEvent
{
	GENERATED_BODY()

	/** Timestamp for when the reducer executed */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBTimestamp Timestamp;

	/** Result status of the reducer */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBStatus Status;

	/** Identity that initiated the call */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBIdentity CallerIdentity;

	/** Connection ID for the caller */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FSpacetimeDBConnectionId CallerConnectionId;

	/** Energy consumed while executing */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FEnergyQuantaType EnergyConsumed;

	/** Detailed call information */
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category="SpacetimeDB")
	FReducer Reducer;

	FORCEINLINE bool operator==(const FClientUnrealReducerEvent& Other) const
	{
		return Status == Other.Status && Timestamp == Other.Timestamp && CallerIdentity == Other.CallerIdentity &&
			CallerConnectionId == Other.CallerConnectionId && EnergyConsumed == Other.EnergyConsumed &&
			Reducer == Other.Reducer;
	}

	FORCEINLINE bool operator!=(const FClientUnrealReducerEvent& Other) const
	{
		return !(*this == Other);
	}
};

/** Represents event with variant message data. */
USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FClientUnrealEvent
{
	GENERATED_BODY()

	/** Tagged union holding reducer call, unit events, or error string */
	TVariant<FReducer, FSpacetimeDBUnit, FString> MessageData;

	/** Type tag indicating what this event represents */
	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	ESpacetimeDBEventTag Tag = ESpacetimeDBEventTag::UnknownTransaction;

	/** === Static factory methods ===*/
	static FClientUnrealEvent Reducer(const FReducer& Value)
	{
		FClientUnrealEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::Reducer;
		Obj.MessageData.Set<FReducer>(Value);
		return Obj;
	}

	static FClientUnrealEvent SubscribeApplied(const FSpacetimeDBUnit& Value)
	{
		FClientUnrealEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::SubscribeApplied;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FClientUnrealEvent UnsubscribeApplied(const FSpacetimeDBUnit& Value)
	{
		FClientUnrealEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::UnsubscribeApplied;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FClientUnrealEvent Disconnected(const FSpacetimeDBUnit& Value)
	{
		FClientUnrealEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::Disconnected;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	static FClientUnrealEvent SubscribeError(const FString& Value)
	{
		FClientUnrealEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::SubscribeError;
		Obj.MessageData.Set<FString>(Value);
		return Obj;
	}

	static FClientUnrealEvent UnknownTransaction(const FSpacetimeDBUnit& Value)
	{
		FClientUnrealEvent Obj;
		Obj.Tag = ESpacetimeDBEventTag::UnknownTransaction;
		Obj.MessageData.Set<FSpacetimeDBUnit>(Value);
		return Obj;
	}

	FORCEINLINE bool IsReducer() const { return Tag == ESpacetimeDBEventTag::Reducer; }
	FORCEINLINE FReducer GetAsReducer() const
	{
		ensureMsgf(IsReducer(), TEXT("MessageData does not hold Reducer!"));
		return MessageData.Get<FReducer>();
	}

	FORCEINLINE bool IsSubscribeApplied() const { return Tag == ESpacetimeDBEventTag::SubscribeApplied; }
	FORCEINLINE FSpacetimeDBUnit GetAsSubscribeApplied() const
	{
		ensureMsgf(IsSubscribeApplied(), TEXT("MessageData does not hold SubscribeApplied!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsUnsubscribeApplied() const { return Tag == ESpacetimeDBEventTag::UnsubscribeApplied; }
	FORCEINLINE FSpacetimeDBUnit GetAsUnsubscribeApplied() const
	{
		ensureMsgf(IsUnsubscribeApplied(), TEXT("MessageData does not hold UnsubscribeApplied!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsDisconnected() const { return Tag == ESpacetimeDBEventTag::Disconnected; }
	FORCEINLINE FSpacetimeDBUnit GetAsDisconnected() const
	{
		ensureMsgf(IsDisconnected(), TEXT("MessageData does not hold Disconnected!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool IsSubscribeError() const { return Tag == ESpacetimeDBEventTag::SubscribeError; }
	FORCEINLINE FString GetAsSubscribeError() const
	{
		ensureMsgf(IsSubscribeError(), TEXT("MessageData does not hold SubscribeError!"));
		return MessageData.Get<FString>();
	}

	FORCEINLINE bool IsUnknownTransaction() const { return Tag == ESpacetimeDBEventTag::UnknownTransaction; }
	FORCEINLINE FSpacetimeDBUnit GetAsUnknownTransaction() const
	{
		ensureMsgf(IsUnknownTransaction(), TEXT("MessageData does not hold UnknownTransaction!"));
		return MessageData.Get<FSpacetimeDBUnit>();
	}

	FORCEINLINE bool operator==(const FClientUnrealEvent& Other) const
	{
		if (Tag != Other.Tag) return false;
		switch (Tag)
		{
		case ESpacetimeDBEventTag::Reducer: return GetAsReducer() == Other.GetAsReducer();
		case ESpacetimeDBEventTag::SubscribeApplied: return GetAsSubscribeApplied() == Other.GetAsSubscribeApplied();
		case ESpacetimeDBEventTag::UnsubscribeApplied: return GetAsUnsubscribeApplied() == Other.GetAsUnsubscribeApplied();
		case ESpacetimeDBEventTag::Disconnected: return GetAsDisconnected() == Other.GetAsDisconnected();
		case ESpacetimeDBEventTag::SubscribeError: return GetAsSubscribeError() == Other.GetAsSubscribeError();
		case ESpacetimeDBEventTag::UnknownTransaction: return GetAsUnknownTransaction() == Other.GetAsUnknownTransaction();
		default: return false;
		}
	}

	FORCEINLINE bool operator!=(const FClientUnrealEvent& Other) const
	{
		return !(*this == Other);
	}
};

UCLASS()
class CLIENT_UNREAL_API UClientUnrealEventBpLib : public UBlueprintFunctionLibrary
{
    GENERATED_BODY()

private:
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ClientUnrealEvent")
    static FClientUnrealEvent Reducer(const FReducer& InValue)
    {
        return FClientUnrealEvent::Reducer(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ClientUnrealEvent")
    static FClientUnrealEvent SubscribeApplied(const FSpacetimeDBUnit& InValue)
    {
        return FClientUnrealEvent::SubscribeApplied(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ClientUnrealEvent")
    static FClientUnrealEvent UnsubscribeApplied(const FSpacetimeDBUnit& InValue)
    {
        return FClientUnrealEvent::UnsubscribeApplied(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ClientUnrealEvent")
    static FClientUnrealEvent Disconnected(const FSpacetimeDBUnit& InValue)
    {
        return FClientUnrealEvent::Disconnected(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ClientUnrealEvent")
    static FClientUnrealEvent SubscribeError(const FString& InValue)
    {
        return FClientUnrealEvent::SubscribeError(InValue);
    }

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB|ClientUnrealEvent")
    static FClientUnrealEvent UnknownTransaction(const FSpacetimeDBUnit& InValue)
    {
        return FClientUnrealEvent::UnknownTransaction(InValue);
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static bool IsReducer(const FClientUnrealEvent& Event) { return Event.IsReducer(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static bool IsSubscribeApplied(const FClientUnrealEvent& Event) { return Event.IsSubscribeApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static bool IsUnsubscribeApplied(const FClientUnrealEvent& Event) { return Event.IsUnsubscribeApplied(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static bool IsDisconnected(const FClientUnrealEvent& Event) { return Event.IsDisconnected(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static bool IsSubscribeError(const FClientUnrealEvent& Event) { return Event.IsSubscribeError(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static bool IsUnknownTransaction(const FClientUnrealEvent& Event) { return Event.IsUnknownTransaction(); }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static FReducer GetAsReducer(const FClientUnrealEvent& Event)
    {
        return Event.GetAsReducer();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static FSpacetimeDBUnit GetAsSubscribeApplied(const FClientUnrealEvent& Event)
    {
        return Event.GetAsSubscribeApplied();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static FSpacetimeDBUnit GetAsUnsubscribeApplied(const FClientUnrealEvent& Event)
    {
        return Event.GetAsUnsubscribeApplied();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static FSpacetimeDBUnit GetAsDisconnected(const FClientUnrealEvent& Event)
    {
        return Event.GetAsDisconnected();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static FString GetAsSubscribeError(const FClientUnrealEvent& Event)
    {
        return Event.GetAsSubscribeError();
    }

    UFUNCTION(BlueprintPure, Category = "SpacetimeDB|ClientUnrealEvent")
    static FSpacetimeDBUnit GetAsUnknownTransaction(const FClientUnrealEvent& Event)
    {
        return Event.GetAsUnknownTransaction();
    }

};


USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FEventContext : public FContextBase
{
	GENERATED_BODY()

	FEventContext() = default;
	FEventContext(UDbConnection* InConn, const FClientUnrealEvent& InEvent) : FContextBase(InConn), Event(InEvent) {}

	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	FClientUnrealEvent Event;
};

USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FReducerEventContext : public FContextBase
{
	GENERATED_BODY()

	FReducerEventContext() = default;
	FReducerEventContext(UDbConnection* InConn, FClientUnrealReducerEvent InEvent) : FContextBase(InConn), Event(InEvent) {}
	
	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB") 
	FClientUnrealReducerEvent Event;
};

USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FErrorContext : public FContextBase
{
	GENERATED_BODY()

	FErrorContext() = default;
	FErrorContext(UDbConnection* InConn, const FString& InError) : FContextBase(InConn), Error(InError) {}

	UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
	FString Error;

};

USTRUCT(BlueprintType)
struct CLIENT_UNREAL_API FSubscriptionEventContext : public FContextBase
{
	GENERATED_BODY()

	FSubscriptionEventContext() = default;
	FSubscriptionEventContext(UDbConnection* InConn) : FContextBase(InConn) {}

};

DECLARE_DYNAMIC_DELEGATE_OneParam(
	FOnSubscriptionApplied,
	FSubscriptionEventContext, Context);

DECLARE_DYNAMIC_DELEGATE_OneParam(
	FOnSubscriptionError,
	FErrorContext, Context);

UCLASS(BlueprintType)
class CLIENT_UNREAL_API USetReducerFlags : public USetReducerFlagsBase
{
	GENERATED_BODY()

public:
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void Add(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void Connect(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void Debug(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void Disconnect(ECallReducerFlags Flag);
	UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
	void SayHello(ECallReducerFlags Flag);

};

// RemoteTables class
UCLASS(BlueprintType)
class CLIENT_UNREAL_API URemoteTables : public UObject
{
    GENERATED_BODY()

public:
    void Initialize();

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    UPersonTable* Person;

};

// RemoteReducers class
UCLASS(BlueprintType)
class CLIENT_UNREAL_API URemoteReducers : public UObject
{
    GENERATED_BODY()

public:

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(
        FAddHandler,
        const FReducerEventContext&, Context,
        const FString&, Name,
        int32, Age
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FAddHandler OnAdd;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void Add(const FString& Name, const int32 Age);

    bool InvokeAdd(const FReducerEventContext& Context, const UAddReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FConnectHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FConnectHandler OnConnect;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void Connect();

    bool InvokeConnect(const FReducerEventContext& Context, const UConnectReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FDebugHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDebugHandler OnDebug;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void Debug();

    bool InvokeDebug(const FReducerEventContext& Context, const UDebugReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FDisconnectHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FDisconnectHandler OnDisconnect;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void Disconnect();

    bool InvokeDisconnect(const FReducerEventContext& Context, const UDisconnectReducer* Args);

    DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(
        FSayHelloHandler,
        const FReducerEventContext&, Context
    );
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FSayHelloHandler OnSayHello;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    void SayHello();

    bool InvokeSayHello(const FReducerEventContext& Context, const USayHelloReducer* Args);

    // Internal error handling
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FInternalOnUnhandledReducerError, const FReducerEventContext&, Context, const FString&, Error);
    FInternalOnUnhandledReducerError InternalOnUnhandledReducerError;

private:

    friend UDbConnection;

    UPROPERTY()
    class UDbConnection* Conn;

    UPROPERTY()
    USetReducerFlags* SetCallReducerFlags;
};

// SubscriptionBuilder class
UCLASS(BlueprintType)
class CLIENT_UNREAL_API USubscriptionBuilder : public USubscriptionBuilderBase
{
    GENERATED_BODY()

public:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionBuilder* OnApplied(FOnSubscriptionApplied Callback);

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionBuilder* OnError(FOnSubscriptionError Callback);

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    USubscriptionHandle* Subscribe(const TArray<FString>& SQL);

    /** Convenience for subscribing to all rows from all tables */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    USubscriptionHandle* SubscribeToAllTables();


    friend class UDbConnection;
    friend class UDbConnectionBase;

protected:
    UPROPERTY()
    class UDbConnection* Conn;

    // Delegates stored so Subscribe() can bind forwarding callbacks
    FOnSubscriptionApplied OnAppliedDelegateInternal;
    FOnSubscriptionError OnErrorDelegateInternal;
};

// SubscriptionHandle class
UCLASS(BlueprintType)
class CLIENT_UNREAL_API USubscriptionHandle : public USubscriptionHandleBase
{
    GENERATED_BODY()

public:

    USubscriptionHandle() {};

    explicit USubscriptionHandle(UDbConnection* InConn);

    friend class USubscriptionBuilder;

private:
    UPROPERTY()
    class UDbConnection* Conn;

    // Delegates that expose subscription events with connection aware contexts
    FOnSubscriptionApplied OnAppliedDelegate;
    FOnSubscriptionError OnErrorDelegate;

    UFUNCTION()
    void ForwardOnApplied(const FSubscriptionEventContextBase& BaseCtx);

    UFUNCTION()
    void ForwardOnError(const FErrorContextBase& BaseCtx);
};

/*
    @Note: Child class of UDbConnectionBuilderBase.
*/
UCLASS(BlueprintType)
class CLIENT_UNREAL_API UDbConnectionBuilder : public UDbConnectionBuilderBase
{
    GENERATED_BODY()
public:

    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithUri(const FString& InUri);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithModuleName(const FString& InName);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithToken(const FString& InToken);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* WithCompression(const ESpacetimeDBCompression& InCompression);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnConnect(FOnConnectDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnConnectError(FOnConnectErrorDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnectionBuilder* OnDisconnect(FOnDisconnectDelegate Callback);
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB")
    UDbConnection* Build();

private:

    // Stored delegates which will be forwarded when the connection events occur.
    FOnConnectDelegate OnConnectDelegateInternal;
    FOnDisconnectDelegate OnDisconnectDelegateInternal;
};

// Main DbConnection class
UCLASS(BlueprintType)
class CLIENT_UNREAL_API UDbConnection : public UDbConnectionBase
{
    GENERATED_BODY()

public:
    explicit UDbConnection(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get());


    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    URemoteTables* Db;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    URemoteReducers* Reducers;

    UPROPERTY(BlueprintReadOnly, Category="SpacetimeDB")
    USetReducerFlags* SetReducerFlags;

    // Delegates that allow users to bind with the concrete connection type.
    FOnConnectDelegate OnConnectDelegate;
    FOnDisconnectDelegate OnDisconnectDelegate;

    UFUNCTION(BlueprintCallable, Category="SpacetimeDB")
    USubscriptionBuilder* SubscriptionBuilder();

    /** Static entry point for constructing a connection. */
    UFUNCTION(BlueprintCallable, Category = "SpacetimeDB", DisplayName = "SpacetimeDB Builder")
    static UDbConnectionBuilder* Builder();

    // Error handling
    DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnUnhandledReducerError, const FReducerEventContext&, Context, const FString&, Error);
    UPROPERTY(BlueprintAssignable, Category="SpacetimeDB")
    FOnUnhandledReducerError OnUnhandledReducerError;


protected:

    // Hook up error handling to reducers
    virtual void PostInitProperties() override;

    UFUNCTION()
    void ForwardOnConnect(UDbConnectionBase* BaseConnection, FSpacetimeDBIdentity InIdentity, const FString& InToken);
    UFUNCTION()
    void ForwardOnDisconnect(UDbConnectionBase* BaseConnection, const FString& Error);

    UFUNCTION()
    void OnUnhandledReducerErrorHandler(const FReducerEventContext& Context, const FString& Error);

    // Override the DbConnectionBase methods to handle updates and events
    virtual void DbUpdate(const FDatabaseUpdateType& Update, const FSpacetimeDBEvent& Event) override;
    
    // Override the reducer event handler to dispatch events to the appropriate reducers
    virtual void ReducerEvent(const FReducerEvent& Event) override;
    
    // Override the reducer event failed handler
    virtual void ReducerEventFailed(const FReducerEvent& Event, const FString ErrorMessage) override;
};

